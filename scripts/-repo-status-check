#!/usr/bin/env python3

import glob
import subprocess
import os

REPOS_TO_CHECK = [
    "~/data/*",
]


def run_command(command, shell=True, check=True):
    print(f"Running command: {command}")
    try:
        result = subprocess.run(
            command, shell=shell, check=check, capture_output=True, text=True
        )
        outtext, outerr = result.stdout, result.stderr
        out = outtext + outerr
        print(out)
        return outtext, outerr

    except subprocess.CalledProcessError as e:
        print(e.stdout, e.stderr)
        raise e


def check_if_git_dirty():
    outtext, outerr = run_command("git status")
    out = outtext + (outerr if outerr else "")
    out_lower = out.strip().lower()
    if (
        out_lower.find("nothing to commit") == -1
        or out_lower.find("your branch is ahead of") != -1
    ):
        return True

    return False


def yn_question(prompt):
    return input(f"{prompt} [y/N]: ").strip().lower() == "y"


def press_enter_to_continue():
    input('Press Enter to continue...')


def main():
    print("Checking repos...")
    for pattern in REPOS_TO_CHECK:
        for p in glob.glob(
            os.path.abspath(os.path.expanduser(pattern)), recursive=True
        ):
            if os.path.exists(os.path.join(p, ".git")):
                os.chdir(p)
                print(f"REPO: [{os.getcwd()}]")
                try:
                    if check_if_git_dirty():
                        if yn_question(
                            f"REPO: [{os.getcwd()}]: Repository is dirty. Do you want to push all changes with default commit message?"
                        ):
                            run_command("git add -A")
                            run_command('git commit -m "update"', check=False)
                            run_command("git push")

                except Exception as e:
                    print(f"repo check failed: {e}")
                    if not yn_question("Proceed?"):
                        exit(1)

                print("\n-----------------------------------------------\n")


if __name__ == "__main__":
    main()
