#!/usr/bin/env python3

import glob
import subprocess
import os
import argparse

# verbose flag, controlled via command-line
VERBOSE = False

REPOS_TO_CHECK = [
    "~/data/*",
]


def run_command(command, shell=True, check=True):
    if VERBOSE: print(f"Running command: {command}")
    try:
        result = subprocess.run(
            command, shell=shell, check=check, capture_output=True, text=True
        )
        outtext, outerr = result.stdout, result.stderr
        out = outtext + outerr
        if VERBOSE: print(out)
        return outtext, outerr

    except subprocess.CalledProcessError as e:
        # always print errors
        print(e.stdout, e.stderr)
        raise e


def check_if_git_dirty():
    outtext, outerr = run_command("git status")
    out = outtext + (outerr if outerr else "")
    out_lower = out.strip().lower()
    if (
        out_lower.find("nothing to commit") == -1
        or out_lower.find("your branch is ahead of") != -1
    ):
        print(out)
        return True

    return False


def check_upstream_commits():
    try:
        run_command("git fetch origin")
        outtext, _ = run_command("git rev-list --count HEAD..@{u}", check=False)
        count = int(outtext.strip()) if outtext.strip().isdigit() else 0
        return count

    except Exception as e:
        print(f"Failed to check upstream: {e}")
        return 0


def yn_question(prompt):
    return input(f"{prompt} [y/N]: ").strip().lower() == "y"


def press_enter_to_continue():
    input("Press Enter to continue...")


def main():
    print("Checking repos...")
    print("-----------------------------------------------")
    for pattern in REPOS_TO_CHECK:
        for p in glob.glob(
            os.path.abspath(os.path.expanduser(pattern)), recursive=True
        ):
            if not os.path.exists(os.path.join(p, ".git")):
                continue

            os.chdir(p)
            print(f"REPO: [{os.getcwd()}]")

            upstream_count = check_upstream_commits()
            if upstream_count > 0:
                if yn_question(f"There are {upstream_count} commits upstream. Run git pull --ff-only?"):  # noqa
                    try:
                        run_command("git pull --ff-only")

                    except Exception as e:
                        print(f"Fast-forward pull failed: {e}")
                        if yn_question("Skip this repo? "):
                            continue

                        else:
                            exit(1)

            try:
                if not check_if_git_dirty():
                    continue

            except Exception as e:
                print(f"Failed to check git status: {e}")
                if yn_question("Skip this repo?"):
                    continue

                else:
                    exit(1)

            if yn_question(
                f"Repository [{os.getcwd()}] is dirty. Do you want to push all changes with default commit message?"
            ):
                try:
                    run_command("git add -A")
                    run_command('git commit -m "update"', check=False)
                    run_command("git push")

                except Exception as e:
                    print(f"Commit & push failed: {e}")
                    if yn_question("Try git pull --rebase?"):
                        try:
                            run_command("git pull --rebase")
                            if yn_question("Commit & push again?"):
                                try:
                                    run_command("git add -A")
                                    run_command('git commit -m "update"', check=False)
                                    run_command("git push")
                                    continue

                                except Exception as e:
                                    print(f"Push failed again: {e}")
                                    if yn_question("Skip this repo?"):
                                        continue

                                    else:
                                        exit(1)

                        except Exception as e:
                            print(f"Failed to pull.")
                            if yn_question("Skip this repo?"):
                                break

                            else:
                                exit(1)

                    if yn_question("Skip this repo?"):
                        break

                    else:
                        exit(1)

    print("-----------------------------------------------")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Check repo status and push changes")
    parser.add_argument("-v", "--verbose", action="store_true", help="enable verbose output")
    args = parser.parse_args()
    # set global verbose flag
    VERBOSE = args.verbose

    main()
